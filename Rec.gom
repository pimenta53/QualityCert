module parser.Rec
	imports int String
	abstract syntax
	Prog = Prog(e1:Exp)
	Exp = Exp(eop:ExpOR, eorp:ExpORPr)
	ExpOR = ExpOR(ea:ExpAND, eap:ExpANDPr)
	ExpAND = ExpAND(ae:AritExp, re:RelExp)
	ExpORPr = ExpORPr(e1:Exp)
			| ExpORPrEmpty()
	ExpANDPr = ExpANDPr(e1:Exp)
			 | ExpANDPrEmpty()
	AritExp = AritExp(t:Term, tp:TermPr)
	RelExp = RelExpLess(a1:AritExp)
	       | RelExpMore(a2:AritExp)
	       | RelExpDiferent(a3:AritExp)
           | RelExpLessEqual(a4:AritExp)
		   | RelExpMoreEqual(a5:AritExp)
		   | RelExpEmpty()
	Term = Term(f:Factor, fp:FactorPr)
	TermPr = TermPrPlus(t:Term, tp:TermPr)
	   	   | TermPrNeg(t:Term, tp:TermPr)
	   	   | TermPrEqual(t:Term, tp:TermPr)
	   	   | TermPrEmpty()
	FactorPr = Times(f:Factor, fp:FactorPr)
			 | Div(f:Factor, fp:FactorPr)
			 | FactorPrEmpty()
	Factor = FNil()
		   | FInteger(i:int)
		   | FString(s:String)
		   | FExpList(el:ExpList)
		   | FNeg(e1:Exp)
		   | FWhile(e1:Exp, e2:Exp)
		   | FFor(id:String, e1:Exp, e2:Exp, e3:Exp)
		   | FBreak()
		   | FLet(dl:DecList, el:ExpList)
		   | FLvalue(lv:LValue)
		   | FIfThen(e1:Exp, e2:Exp)
		   | FIfThenElse(e1:Exp, e2:Exp, e3:Exp)
    DecList = DecList(Dec*)
	Dec = DTyDec(td:TyDec)
		| DVarDec(vd:VarDec)
		| DFunDec(fd:FunDec)
	TyDec = TyDec(ti:TypeId, t:Ty)
	Ty = TFieldList(fl:FieldList)
	   | TArrayOf(ti:TypeId)
	   | TTypeId(ti:TypeId)
	FieldList = FieldListDP(d:String, ti:TypeId, a:AuxFieldList)
	          | FieldListEqual(id:String, ti:TypeId, a:AuxFieldList)
	          | FieldListEmpty()
	AuxFieldList = AuxFieldList(IntFieldList*)
	IntFieldList = IntFieldList1(id:String, a:Aux1)
			     | IntFieldList2(e1:Exp)
				 | IntFieldList3(e1:Exp, e2:Exp)
	Aux1 = Aux11(ti:TypeId)
		 | Aux12(ti:TypeId)
	TypeId = TypeId(id:String)
		   | TypeIdString(s:String)
	       | TypeIdInteger(i:int)
	       | TypeIdNil()
	VarDec = VarDec1(id:String, a:Aux2)
	       | VarDec2(id:String, ti:TypeId, a:Aux2)
	Aux2 = Aux21(e:Exp)
		 | Aux22(e:Exp)
	FunDec = FunDec1(id:String, fl:FieldList, e1:Exp)
		   | FunDec2(id:String, fl:FieldList, ti:TypeId, e1:Exp)
	LValue = LValue(id:String, fra:FunctionRecordArray)
	FunctionRecordArray = FRAArgList(al:ArgList)
						| FRAFieldList(fl:FieldList)
						| FRA1(a1:AuxFRA1)
						| FRA2(a2:AuxFRA2)
						| FRA3(a1:AuxFRA1, a2:AuxFRA2)
						| FunctionRecordArrayEmpty()
	AuxFRA1 = AuxFRA1(e1:Exp)
	AuxFRA2 = AuxFRA21(e1:Exp)
	        | AuxFRA22(a3:Aux3, e2:Exp)
	        | AuxFRA23(a3:Aux3, a4:Aux4, e2:Exp)
			| AuxFRA24(a4:Aux4, e2:Exp)
	Aux3 = Aux3(String*)
	Aux4 = Aux4(Exp*)
	ExpList = ExpList(e1:Exp, a:AuxExpList)
			| ExpListEmpty()
	AuxExpList = AuxExpList(Exp*)
	ArgList = ArgList(e1:Exp, a:AuxArgList)
			| ArgListEmpty()
	AuxArgList = AuxArgList(Exp*)